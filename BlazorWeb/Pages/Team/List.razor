
@inject AppState AppState
@implements IDisposable
@using Services.ViewModels.Teams


<h1>Current Teams</h1>


@if (teams == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Skill</th>
                <th colspan="2">Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var team in teams)
            {                
                <tr>
                    <td>@team.Id</td>
                    <td>@team.Name</td>
                    <td>@team.Skill</td>
                    <td><button class="btn btn-primary" name="Edit" @onclick="@(e => EditClick(@team.Id))">Edit</button></td>
                    <td><button class="btn btn-danger" name="Delete" @onclick="@(e => DeleteClick(@team.Id))">Delete</button></td>
                </tr>
                
            }
        </tbody>
    </table>
}

@code {
    private TeamViewModel[] teams;

    private void SetData()
    {
        teams = (IEnumerable<TeamViewModel>)AppState.ListData;

        StateHasChanged();
    }
    private void DeleteClick(long id)
    {
        AppState.ChooseModelForDelete(id);
    }

    private void EditClick(long id)
    {
        AppState.ChooseModelForEdit(id);
    }

    protected override void OnInitialized()
    {
        AppState.ListDataChanged += SetData;
    }

    public void Dispose()
    {
        AppState.ListDataChanged -= SetData;
    }

}