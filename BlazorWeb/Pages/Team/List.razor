
@inject AppState AppState
@inject HttpClient Http
@implements IDisposable
@using Services.ViewModels


<h3>Current Teams</h3>


@if (data == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-sm table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Skill</th>
                <th colspan="2">Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var team in data)
            {
                <tr>
                    <td>@team.Id</td>
                    <td>@team.Name</td>
                    <td>@team.Skill</td>
                    <td><button class="btn btn-primary" name="Edit" @onclick="@(e => EditClick(@team.Id))">Edit</button></td>
                    <td><button class="btn btn-danger" name="Delete" @onclick="@(e => DeleteClick(@team.Id))">Delete</button></td>
                </tr>

            }
        </tbody>
    </table>
}

@code {
    private TeamViewModel[] data;

    protected override async Task OnInitializedAsync()
    {

        await SetData();
    }

    private async Task<bool> SetData()
    {
        data = await Http.GetJsonAsync<TeamViewModel[]>($"{AppState.TeamListURL}");

        StateHasChanged();

        return true;
    }
    private async Task<bool> DeleteClick(long id)
    {
        var deleteObject = new ViewModel() { Id = id };

        await HttpClientJsonExtensions.PostJsonAsync(Http, $"{AppState.TeamDeleteURL}", deleteObject);

        await SetData();

        return true;
    }

    private async Task<bool> EditClick(long id)
    {
        var selectedObject = await Http.GetJsonAsync<TeamViewModel>($"{AppState.TeamFindURL}/{id}");

        AppState.SetModelForEdit(selectedObject);

        return true;
    }

    protected override void OnInitialized()
    {
        AppState.ReloadListData += SetData;
    }

    public void Dispose()
    {
        AppState.ReloadListData -= SetData;
    }

}