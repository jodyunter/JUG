@page "/teams"
@inject HttpClient Http
@using Services.ViewModels.Teams

<h1>Current Teams</h1>


<EditForm Model="@EditTeam" OnValidSubmit="CreateOrUpdateTeam">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <button @onclick="@(e => CreateNew())">Create New</button>
    <InputText id="name" @bind-Value="EditTeam.Name" />
    <InputNumber id="skill" @bind-Value="EditTeam.Skill" />

    <button type="submit">Submit</button>
</EditForm>

@if (teams == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Skill</th>
                <th colspan="2">Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var team in teams)
            {
                <tr>
                    <td>@team.Id</td>
                    <td>@team.Name</td>
                    <td>@team.Skill</td>
                    <td><button name="Edit" @onclick="@(e => EditClick(@team.Id))">Edit</button></td>
                    <td><button name="Delete">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private TeamViewModel EditTeam = new TeamViewModel();

    private TeamViewModel[] teams;

    private static string server = "https://localhost:44304";
    private string teamList = $"{server}/api/team";
    private string teamFind = $"{server}/api/team/find";
    private string teamUpdate = $"{server}/api/team";

    protected override async Task OnInitializedAsync()
    {
        await SetData();
    }

    public async Task<bool> SetData()
    {
        teams = await Http.GetJsonAsync<TeamViewModel[]>($"{teamList}");

        return true;
    }

    private async Task<bool> EditClick(long teamId)
    {
        EditTeam = await Http.GetJsonAsync<TeamViewModel>($"{teamFind}/{teamId}");

        return true;
    }

    private async Task<bool> CreateNew()
    {
        EditTeam = new TeamViewModel();

        await SetData();

        StateHasChanged();

        return true;
    }

    private async Task<bool> CreateOrUpdateTeam()
    {
        EditTeam.TeamType = TeamType.BaseTeam;

        await HttpClientJsonExtensions.PostJsonAsync(Http, $"{teamUpdate}", EditTeam);

        await SetData();

        StateHasChanged();

        return true;


    }


}