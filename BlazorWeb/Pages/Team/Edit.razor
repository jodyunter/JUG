
@inject AppState AppState
@implements IDisposable
@using Services.ViewModels.Teams

<h3>TeamEdit</h3>

<EditForm Model="@EditObject" OnValidSubmit="CreateOrUpdateObject">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <button class="btn btn-secondary" @onclick="@(e => CreateNew())">Create New</button>
    <InputText id="name" @bind-Value="EditObject.Name" />
    <InputNumber id="skill" @bind-Value="EditObject.Skill" />

    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@code {
    [Parameter]
    public TeamViewModel EditObject { get; set; } = new TeamViewModel();

    private async Task<bool> CreateNew()
    {
        EditObject = new TeamViewModel();        

        return true;
    }


    private async Task<bool> CreateOrUpdateObject()
    {
        EditObject.TeamType = TeamType.BaseTeam;

        AppState.SetModelForUpdate(EditObject);

        return true;


    }

    public void ModelSelected()
    {
        EditObject = (TeamViewModel)AppState.EditModel;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        AppState.ModelSelected += ModelSelected;
    }

    public void Dispose()
    {
        AppState.ModelSelected -= ModelSelected;
    }
}
