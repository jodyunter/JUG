@page "/listedit/{PageType}"

@inject HttpClient Http
@inject AppState AppState
@implements IDisposable

@using Services.ViewModels.Teams

<h1>Current Teams</h1>

@EditContent

@ListContent



@code {
    [Parameter]
    public string PageType { get; set; }


    public RenderFragment EditContent { get; set; }
    public RenderFragment ListContent { get; set; }

    private TeamViewModel EditObject = new TeamViewModel();


    private object[] data;

    private static string server = "https://localhost:44304";
    private string list { get { return $"{server}/api/{PageType}"; } }
    private string find { get { return $"{server}/api/{PageType}/find"; } }
    private string update { get { return $"{server}/api/{PageType}"; } }
    private string delete { get { return $"{server}/api/{PageType}/delete"; } }

    private string editPage { get { return $"BlazorWeb.Pages.Team.Edit"; } }
    private string listPage { get { return $"BlazorWeb.Pages.Team.List"; } }

    protected override async Task OnInitializedAsync()
    {
        EditContent = CreateBasicContent(editPage);
        ListContent = CreateBasicContent(listPage);
        await SetData();
    }

    RenderFragment CreateBasicContent(string ptype) => builder =>
    {
        builder.OpenComponent(1, Type.GetType(ptype));
        builder.CloseComponent();

    };


    public async Task<bool> SetData()
    {
        data = await Http.GetJsonAsync<object[]>($"{list}");

        AppState.SetListData(data);

        StateHasChanged();

        return true;
    }

    private async Task<bool> DeleteModel(long id)
    {
        var deleteObject = new TeamViewModel() { Id = id };

        await HttpClientJsonExtensions.PostJsonAsync(Http, $"{delete}", deleteObject);

        await SetData();

        return true;
    }
    private async Task<bool> EditModel(long id)
    {
        EditObject = await Http.GetJsonAsync<TeamViewModel>($"{find}/{id}");

        AppState.SetModelForEdit(EditObject);

        return true;
    }

    private async Task<bool> CreateNew()
    {
        EditObject = new TeamViewModel();

        await SetData();

        return true;
    }

    private async Task<bool> CreateOrUpdateModel()
    {

        await HttpClientJsonExtensions.PostJsonAsync(Http, $"{update}", AppState.EditModel);
        await SetData();

        return true;

    }

    protected override void OnInitialized()
    {
        AppState.ModelReadyToSave += CreateOrUpdateModel;
        AppState.ModelSelectedToEdit += EditModel;
        AppState.ModelSelectedToDelete += DeleteModel;
    }

    public void Dispose()
    {
        AppState.ModelReadyToSave -= CreateOrUpdateModel;
        AppState.ModelSelectedToEdit -= EditModel;
        AppState.ModelSelectedToDelete -= DeleteModel;
    }


}